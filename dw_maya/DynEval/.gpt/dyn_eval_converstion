├── DynEval/
│   ├── __init__.py
│   ├── launch.py
│   ├── main_beta.py
│   ├── main_ui.py
│   ├── sim_widget/
│   │   ├── __init__.py
│   │   ├── wgt_cache_operation.py
│   │   ├── wgt_preset_manager.py
│   │   ├── wgt_cache_tree.py
│   │   ├── wgt_state_recovery.py
│   │   ├── wgt_tree_progress.py
│   │   ├── wgt_colortextbutton.py
│   │   ├── wgt_commentary.py
│   │   ├── wgt_maps_tree.py
│   │   ├── wgt_paint_map.py
│   │   ├── wgt_treewidget_toggle.py
│   ├── sim_cmds/
│   │   ├── __init__.py
│   │   ├── cache_management.py
│   │   ├── info_management.py
│   │   ├── preset_management.py
│   │   ├── vtx_management.py
│   │   ├── ziva_cmds.py
│   ├── dendrology/
│   │   ├── __init__.py
│   │   ├── ziva_leaf.py
│   │   ├── cache_leaf.py
│   │   ├── tree_toggle_button.py
│   │   ├── nucleus_leaf/
│   │       ├── __init__.py
│   │       ├── base_standarditem.py
│   │       ├── cloth_standard_item.py
│   │       ├── hair_standard_item.py
│   │       ├── map_standarditem.py
│   │       ├── nrigid_standarditem.py
│   │       ├── nucleus_standarditem.py
│   │       ├── rig_treeitem.py

main_ui.py is the main tool pyside module
launch.py is used to launch the ui inside maya with a shelf button
sim_widget/ is a package with all individual widgets used in main_ui so it is more modular and can be extracted in popup or other tool
sim_cmds/ is a package which are all functions called by widgets and ui elements, there are using all dw_modules backend and maya.cmds
dendrology/ is used for the pyside tree related items
dendrology/nucleus_leaf/ is used to store all standarditem, treewidgetitem....etc related to nucleus solver
cache_leaf.py is another tree which display nucleus cloth maps, cache list, but can be adapted to other displayed items in cunjunction with treeview (like deformer maps)
tree_toggle_button.py is a friendly user display button which is red or green to represent the toggle state of simulation elements, user doesn't like the default toggle coded in treeitems
ziva_leaf.py is the standard item to represent the ziva simulation items


Here's a summary of what we accomplished:

Built a Maya PySide6 tool for managing nucleus and nCloth simulations featuring:

Two-column tree view with toggle buttons
State management for nucleus, nCloth, and nRigid nodes
Proper parent-child hierarchy


Main components:

DynEvalUI: Main window
SimulationTreeView: Custom tree with toggle support
ToggleButtonDelegate: Custom button rendering
BaseSimulationItem/ClothTreeItem: Node representation


Core functionality:

Toggle simulation states (enable/isDynamic)
Batch operations support
Tree hierarchy building
State synchronization with Maya

Started with a MapTreeWidget containing a QTreeView with two columns:

First column: Map names
Second column: Map types (NONE, PerVertex, Texture) using a combobox


Main Challenges Solved:

Made the combobox easier to access and interact with
Fixed hover highlighting and visual feedback
Implemented single-click activation for the combobox
Made the dropdown menu appear automatically
Added auto-close on selection
Fixed column width and row height issues
Improved selection behavior between columns


Key Technical Solutions:

Used QStyledItemDelegate for the type column
Implemented proper edit/popup behavior using tree_view.edit()
Connected appropriate signals for type changes
Used activated signal for better control of combobox behavior


Final Implementation Features:

Single click to open combobox
Immediate dropdown display
Auto-close on selection
Clean selection handling
Proper type updating
Visual feedback for hover states



The end result is a clean, user-friendly interface for managing map types in a tree view with intuitive combobox interaction.